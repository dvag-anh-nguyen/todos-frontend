openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger TODOS
  description: A REST API that uses a API as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Anh Quan Nguyen
    email: myemail@email.com
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://6294af0ca7203b3ed06eac4a.mockapi.io/api
paths:
  /v1/task:
    get:
      description: |
        Returns all tasks from the system that the user has access to
      operationId: findTasks
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Task response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new Task
      operationId: addTask
      requestBody:
        description: Task to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTask'
      responses:
        '200':
          description: Task response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/task/{id}:
    get:
      description: Returns a Task based on a single ID
      operationId: find Task by id
      parameters:
        - name: id
          in: path
          description: ID of Task to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single Task based on the ID supplied
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          description: ID of Task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/board:
    get:
      description: Get all task boards
      operationId: findBoards
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Board response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new Board
      operationId: addBoard
      requestBody:
        description: Board to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBoard'
      responses:
        '200':
          description: Board response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Task:
      allOf:
        - $ref: '#/components/schemas/NewTask'
        - $ref: '#/components/schemas/SlimTask'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    SlimTask:
      type: object
      required:
        - title
        - status
        - deleted
      properties:
        title:
          type: string
        description:
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        deleted:
          type: boolean

    NewTask:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
        description:
          type: string
        tag:
          type: string
          default: "newtask"
        deleted:
          type: boolean
          default: false
        status:
          $ref: '#/components/schemas/TaskStatus'

    TaskStatus:
      type: string
      enum: ["NOT_STATED","DEFERRED", "IN_PROGRESS","CANCELED", "FAILED", "SUCCESSFUL", "WAITING_ON_OTHERS"]
      default: "NOT_STATED"

    Board:
      allOf:
        - $ref: '#/components/schemas/NewBoard'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    NewBoard:
      type: object
      required:
        - title
        - status
      properties:
        title:
          type: string
        description:
          type: string
        tag:
          type: string
          default: "newboard"
        deleted:
          type: boolean
          default: false
        pinned:
          type: boolean
          default: false
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/SlimTask'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
